{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fcharset162{\*\fname Arial;}Arial TUR;}{\f1\fnil\fcharset0 ;}}
{\colortbl ;\red128\green0\blue0;\red255\green0\blue0;\red0\green128\blue0;\red128\green0\blue128;\red0\green0\blue0;\red0\green255\blue255;}
{\*\generator Msftedit 5.41.15.1515;}\viewkind4\uc1\pard\lang1055\f0\fs20 First of all,  we define a \cf1\b number\b0  \cf0 as a byte type variable with 5 character. Last character is for $ char which is needed for printing string. \par
After that, we define \cf1\b cr\cf0\b0  variable for printing the result at the start of the new line.\par
Then define \cf1\b temp\cf0\b0  variable for storing temporary values in next operations \par
and \cf1\b counter\cf0\b0  for checking whether we process all the bytes of printing string at the end.\par
\par
\cf2\b start\cf0\b0  label:\par
move 0 to \cf3\i cx \cf0\i0 which is used for storing current integer\par
move 0 to \cf3\i bl \cf0\i0 which will be used as a counter of indices\par
\par
\cf2\b morechar\cf0\b0  label:\par
move 01 to ah and int 21 for reading a character\par
then move 0 to \cf3\i dx\cf0\i0  for cleaning dx then move \cf3\i al \cf0\i0 (reading char) to \cf3\i dl\cf0\i0\par
then move \cf3\i cx\cf0\i0  (current int) to \cf3\i ax\par
\cf0\i0 after that compare whether the reading character is enter\par
if it is enter then jumps setupdon1 which jumps to \cf4\b setup_string \cf0\b0 as a result, \par
we couldn't jmp directly to the setup_string label because of the restrictions jmp forward in a86\par
\par
if it is not enter than check whether it is ' ' (space) or not\par
if it is space then jump finnumjmp1 which is another dummy label which goes to \cf4\b finnum\cf0\b0  as a result\par
if the char is not space then it continues to dolasgel label which is basicly checks what is the char\par
\par
\cf2\b dolasgel\cf0\b0  label:\par
checks what character is (by assuming all given inputs are meaningful)\par
meaningful inputs should be ' &, +,*,/,0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,^,|'\par
it checks the order of ASCII characters\par
first checks whether it is & or not if it is then goes to andop1 which is a dummylabel going to \cf4\b andop\par
\cf0\b0 then checks whether it is * or not if it is then goes to multop1 which is a dummylabel going to \cf4\b multop\par
\cf0\b0 then checks whether it is + or not if it is then goes to \cf4\b addop\par
\cf0\b0 then checks whether it is / or not if it is then goes to divop1 which is a dummylabel going to \cf4\b divop\par
\cf5\b0 then checks whether it is an integer, if it is pass this comparings and now lower than value of ":" then it should be integer (by assuming meaningful inputs) and goes to \cf4\b intop \cf5\b0 label\par
after pass these test it checks whether it is hexa letter, if its ASCII value lower than 'G' then it must be hexa then jump to hexa\par
then if checks whether it is ^ , if it is then goest to xorop1 \cf0 is a dummylabel going to \cf4\b xorop\par
\cf5\b0 LASTLY checks whether it is | , if it is then goest to orop1 \cf0 is a dummylabel going to \cf4\b orop\par
\par
\cf2 don\cf4  \cf5\b0 label:\par
For meaningful inputs it enters here only for hexa digits\par
Firstly moves \cf3\i dx\cf5\i0  (reading char) to \cf1\b temp\cf5\b0  variable\par
then, move \cf3\i cx\cf5\i0  (current hexadecimal) to \cf3\i ax\cf5\i0\par
then mov \cf3\i cx\cf5\i0  to 16 (for convert it hexa type)\par
then multiply ax with \cf3\i cx \cf5\i0 and result would be \cf3\i ax\cf5\i0  as we know in a86 opeartions\par
then add \cf1\b temp \cf5\b0 to the\cf1\b  \cf3\b0\i ax\cf5\i0  (reading hexadecimal) and move \cf3\i ax \cf5\i0 to \cf3\i cx\cf5\i0  which is current int for now\par
\par
\cf2\b anadonus\cf5\b0  label:\par
jumps \cf4\b morechar \cf5\b0 label backwardly\cf4\b\par
\cf5\b0\par
\cf2\b intop\cf5\b0  label:\par
because before the jump here we subtracted \cf3\i dx\cf5\i0  from ":" ASCII value first we added that value to \cf3\i dx\cf5\i0\par
then add '0's ASCII value to keep its real value (i.e if it is 8, result will be ASCII(8)-ASCII(0)=8)\par
then jump to \cf4\b don\cf5\b0  label which modifies the storing hexadecimal\par
\par
\cf2\b hexa\cf5\b0  label:\par
because before the jump here we subtracted \cf3\i dx\cf5\i0  from "G" ASCII value first we added that value to \cf3\i dx\cf5\i0\par
then add '7's ASCII value to keep its real value (i.e if it is B, result will be ASCII(B)-ASCII(7)=11)\par
then jump to \cf4\b don\cf5\b0  label which modifies the storing hexadecimal\par
\cf0\par
\cf6\b !:\cf0\b0  because before the operator comes, we push stack the previous hexadecimals pop 2 of them which will be operated all of these op labels\par
\par
\cf2\b addop\cf0\b0  label:\par
because before the operator comes, we push stack the previous hexadecimals pop 2 of them which will be operated \par
then add these 2 operands and push the result \cf3\i cx\cf0\i0  to the stack again.\par
then clear cx with moving it 0 and jump to \cf4\b anadonus\cf0\b0  label which jumps \cf4\b morechar \cf0\b0 again\par
\par
\cf2\b multop\cf0\b0  label:\par
multiply 2 operands which is popped and push the result \cf3\i cx\cf0\i0  to the stack again.\par
then clear cx with moving it 0 and jump to \cf4\b anadonus\cf0\b0  label which jumps \cf4\b morechar \cf0\b0 again\par
\par
\cf2\b andop\cf0\b0  label:\par
bitwise and 2 operands which is popped and push the result \cf3\i cx\cf0\i0  to the stack again.\par
then clear cx with moving it 0 and jump to \cf4\b anadonus\cf0\b0  label which jumps \cf4\b morechar \cf0\b0 again\par
\par
\cf2\b divop\cf0\b0  label:\par
First move 0 to \cf3\i dx\cf0\i0  and clear it to prevent unwanted situations\par
then divide 2 operands which is popped and push the result \cf3\i cx\cf0\i0  to the stack again.\par
then clear cx with moving it 0 and jump to \cf4\b anadonus\cf0\b0  label which jumps \cf4\b morechar \cf0\b0 again\par
\par
\cf2\b xorop \cf0\b0 label:\par
bitwise xor 2 operands which is popped and push the result \cf3\i cx\cf0\i0  to the stack again.\par
then clear cx with moving it 0 and jump to \cf4\b anadonus\cf0\b0  label which jumps \cf4\b morechar \cf0\b0 again\par
\par
\cf2\b orop\cf0\b0  label:\par
bitwise or 2 operands which is popped and push the result \cf3\i cx\cf0\i0  to the stack again.\par
then clear cx with moving it 0 and jump to \cf4\b anadonus\cf0\b0  label which jumps \cf4\b morechar \cf0\b0 again\par
\par
\par
\cf2\b finnum \cf0\b0 label:\par
when hexadecimal is completed \cf3\i cx\cf0\i0  (current hexadecimal) comes there\par
if \cf3\i cx\cf0\i0  is 0 then goes to \cf4\b morechar \cf0\b0 again because no need to push somewhere to 0\par
if it is different from 0 then push the current hexadecimal to stack and jump \cf4\b morechar\cf0\b0  with \cf4\b anadonus\cf0\b0  label\par
\par
\cf2\b setup_string \cf0\b0 label:\par
mov bx to adress of numbers + 4 ( like numbers[4] which is 5th one, the last 0)\par
then move '$' to bx then decrease bx (which is now numbers[3] 4th one, 0 before the last.)\par
\par
continue with comparing \cf3\i cx\cf0\i0  with 0 if it is 0 then jump the \cf4\b enternum \cf0\b0 which is the situations that only entering a 1 hexadecimal, \par
\par
\cf2\b enternum \cf0\b0 label:\par
it's only enter here when input includes only 1 inputs then push that hexadecimal to stack to print it in the end\par
\par
\cf2\b afternum\cf0\b0  label:\par
pop \cf3\i ax\cf0\i0 , because we'll operates with \cf3 ax\cf0  and convert it hexadecimal string.\par
\par
\cf2\b convert_decimal \cf0\b0 label:\par
Firstly move \cf1\b counter \cf0\b0 variable to \cf3\i dx\cf0\i0  (we will check with this whether number is end or not)\par
then increase \cf3\i dx\cf0\i0  and moves it to the \cf1\b counter\cf0\b0  again\par
then clear \cf3\i dx\cf0\i0  with moving it 0 to not come across with undesired situations\par
moves 16 (because we investigate hexadecimals) to \cf3\i cx \cf0\i0 and div \cf3\i cx\cf0\i0  which divides \cf3\i ax\cf0\i0  (popped) value \par
then the remainder will be \cf3\i dx \cf0\i0 and add them 48 to get its real value.\par
if \cf3\i dx\cf0\i0  greater than 9 then it will be hexaletter because of that we jump to \cf4\b prthexa\cf0\b0\par
\par
\cf2\b prthexa \cf0\b0 label:\par
if it is greater than 9, the value comes there and to make it A,B,C,D,E,F we add \cf3\i dx\cf0\i0  7 to get these letters ASCII value. (i.e 48+11 is not equal to B but if you add 7 then it makes B in ASCII)\par
then jumps \cf4\b gec\cf0\b0  label\par
\par
\cf2\b gec\cf0\b0  label:\par
move \cf3\i dl\cf0\i0  to the [bx] (current index of bx) , and decrease \cf3\i bx\cf0\i0  to next opeartions,\par
then compare counter with 4 if it is 4 then the number is end and go out to the loop, if it is not 4 then jump \cf4\b convert_decimal \cf0\b0 again\par
\par
\par
\cf2\b print_cr \cf0\b0 label:\par
print out the newline with the starting of the line\par
\par
\cf2\b printout \cf0\b0 labe:\par
move bx(the String version of the hexadecimal result we get) to dx and print that string out\par
\par
\cf2\b exit \cf0\b0 label:\par
exit code and program ends\par
\par
\par
\par
\par
\par
\par
\par
\lang1033\f1\par
}
 